{
  "project_name": "MultiOCR",
  "project_plan_version": "5.5",
  "last_updated": "2024-10-15",
  "objective": "Develop a Python-based multi-OCR system that utilizes multiple OCR engines for enhanced text recognition accuracy, with robust logging, health monitoring, error handling, and user-friendly operation.",
  "overall_architecture": [
    "Input Handler",
    "File Processor",
    "OCR Engine Manager",
    "Display Handler",
    "Result Reconciler",
    "Output Formatter"
  ],
  "components": {
    "Input_Handler": {
      "responsibilities": [
        "Process command-line arguments",
        "Validate input parameters",
        "Determine input source",
        "Create list of files to process",
        "Parse engine-specific options",
        "Apply template filtering",
        "Handle nested directories",
        "Manage symlinks",
        "Validate files",
        "Extract and preserve metadata",
        "Prepare files for OCR processing",
        "Track progress of input processing"
      ],
      "design_details": {
        "directory_handling": {
          "max_depth": 6,
          "implementation": "Recursive function with depth counter"
        },
        "symlink_handling": {
          "behavior": "Record but do not follow symlinks",
          "output": "Provide symlink information at end of processing"
        },
        "error_handling": {
          "strategy": "Track errors during processing",
          "output": "Terminal output for <=3 errors, log file for >3 errors",
          "user_notification": "Notify of error log file location if created"
        },
        "validation_procedures": [
          "File existence check",
          "Read permissions check",
          "File integrity check",
          "Format validation (file signatures/magic numbers)",
          "File size check (warn if exceptionally large)"
        ],
        "metadata_handling": {
          "strategy": "Preserve all available metadata",
          "output": "Create JSON file for each processed file",
          "json_structure": {
            "original_filename": "string",
            "file_path": "string",
            "file_size": "number",
            "creation_date": "ISO8601 string",
            "modification_date": "ISO8601 string",
            "file_type": "string",
            "additional_metadata": "object"
          }
        },
        "file_preparation": {
          "pdf_handling": {
            "tesseract": "Convert PDFs to images",
            "google_vision": "Pass PDFs directly",
            "apple_vision": "To be determined"
          },
          "image_preprocessing": "Implement basic optimization if needed",
          "google_vision_preparation": "Implement upload to Google Cloud Storage if required"
        },
        "progress_tracking": {
          "metrics": [
            "Total files discovered",
            "Files processed",
            "Files queued (Google Vision)",
            "Files skipped",
            "Current file in process",
            "Estimated time remaining",
            "Percentage of completion"
          ]
        }
      },
      "status": "Not implemented",
      "notes": "Will need to integrate with the configurable debug levels",
      "implementation_details": {
        "template_functionality": {
          "format": "Plain text file with one file extension per line",
          "content_example": "jpg jpeg tif tiff png gif pdf",
          "default_behavior": "Process all files if no template provided"
        },
        "symlink_handling": {
          "behavior": "Record but do not follow symlinks",
          "reporting": {
            "less_than_five": "Display paths on screen at end of processing",
            "five_or_more": "Create 'symlinks.txt' in output directory with full paths"
          }
        },
        "command_line_arguments": [
          {
            "flag": "file/directory path",
            "description": "Input source (optional, default is current directory)",
            "type": "positional"
          },
          {
            "flag": "--depth",
            "description": "Limit directory traversal depth",
            "type": "optional"
          },
          {
            "flag": "--debug",
            "description": "Enable detailed logging and diagnostics",
            "type": "optional"
          },
          {
            "flag": "--engine",
            "description": "Specify OCR engines to use (can be used multiple times)",
            "type": "optional"
          },
          {
            "flag": "--output",
            "description": "Specify output location",
            "type": "optional"
          },
          {
            "flag": "--template",
            "description": "Specify file extension template",
            "type": "optional"
          },
          {
            "flag": "--test, -t",
            "description": "Test mode without actual processing",
            "type": "optional"
          },
          {
            "flag": "-v, --verbose",
            "description": "Enable more detailed output",
            "type": "optional"
          },
          {
            "flag": "-h, --help",
            "description": "Display usage information",
            "type": "optional"
          },
          {
            "flag": "--version",
            "description": "Display version number",
            "type": "optional"
          },
          {
            "flag": "--log, -l",
            "description": "Enable logging to a file",
            "type": "optional"
          }
        ]
      }
    },
    "File_Processor": {
      "responsibilities": [
        "Determine file type",
        "Prepare files for OCR processing",
        "Preserve original file metadata",
        "Handle large files",
        "Manage file queues for different OCR engines"
      ],
      "design_details": {
        "large_file_handling": {
          "strategy": "Initially pass all files to OCR engines",
          "contingency": "Implement chunking if engine fails due to file size"
        },
        "queuing_system": {
          "apple_vision_tesseract": "Process files in order",
          "google_vision": {
            "strategy": "Implement separate queue for batch processing",
            "process": "Send files in batches while continuing local processing",
            "result_handling": "Implement callback mechanism for results"
          }
        }
      },
      "implementation_notes": [
        "Create FileInputHandler class for input operations",
        "Implement FileMetadataExtractor for metadata handling",
        "Develop GoogleVisionQueue for batch processing",
        "Create ProgressTracker for managing progress information",
        "Implement ValidationManager for file validation",
        "Develop ErrorLogger for error tracking and reporting"
      ],
      "status": "Not implemented"
    },
    "OCR_Engine_Manager": {
      "name": "OCREngineManager",
      "responsibilities": [
        "Manage multiple OCR engines",
        "Coordinate OCR processes across engines",
        "Handle engine-specific file preparation",
        "Implement parallel processing for OCR tasks",
        "Collect and store results from engines",
        "Manage errors in individual engines",
        "Track performance metrics"
      ],
      "features": [
        "Asynchronous file processing using Python's asyncio",
        "Concurrent execution of multiple OCR engines",
        "Multiple OCR engine management with dynamic registration",
        "Comprehensive error handling for engine failures and unexpected exceptions",
        "Integration with logging and health monitoring systems",
        "JSON serialization error handling"
      ],
      "implementation_details": {
        "file": "ocr_engine_manager.py",
        "main_class": "OCREngineManager",
        "key_methods": [
          "register_engine",
          "process_file",
          "process_files",
          "get_overall_health",
          "get_engine_health",
          "_run_engine"
        ],
        "additional_notes": [
          "Uses asyncio for efficient concurrent processing",
          "Implements a custom OCREngineError for specific error handling",
          "Designed with clear separation of concerns for each OCR engine",
          "Handles JSON serialization errors gracefully"
        ],
        "engine_failure_handling": "Continue processing with remaining engines if one fails",
        "processing_completion": "Stop when all engines have processed or failed"
      }
    },
    "Display_Handler": {
      "responsibilities": [
        "Show real-time processing status",
        "Display health indicators with color-coding (GREEN, YELLOW, RED)",
        "Present log outputs at appropriate debug levels",
        "Show error messages and warnings",
        "Provide user interface for changing debug levels at runtime",
        "Display progress bar and file counter (current/total)"
      ],
      "status": "Not implemented",
      "notes": "Design should account for real-time updates from Health Monitoring system",
      "components": {
        "ProgressTracker": {
          "description": "Manages and displays overall progress and current file progress",
          "features": [
            "Overall progress bar",
            "Current file progress indicator",
            "Elapsed time display"
          ]
        },
        "MessageHandler": {
          "description": "Manages different types of messages (info, warning, error)",
          "features": [
            "Color-coded output (e.g., red for errors, yellow for warnings)",
            "Verbose mode toggle"
          ]
        },
        "PerformanceMonitor": {
          "description": "Displays performance metrics",
          "features": [
            "Processing speed (files/second)",
            "Average time per file",
            "Resource usage (optional)"
          ]
        },
        "Logger": {
          "description": "Handles logging of display output",
          "features": [
            "Log normal information by default",
            "Option to log only display output",
            "Option to log all information"
          ]
        }
      },
      "behavior": {
        "initialization": "Create display layout with sections for progress, current file, and messages",
        "update_frequency": {
          "progress": "Update on each file completion and every 1% of overall progress",
          "current_file": "Update when new file starts processing",
          "performance_metrics": "Update every 5 seconds",
          "messages": "Display immediately when received"
        },
        "resizing": "Automatically adjust layout when terminal is resized",
        "verbose_mode": "Display additional information in bottom 1/3 of screen, scrollable"
      }
    },
    "Result_Reconciler": {
      "responsibilities": [
        "Compare results from multiple OCR engines",
        "Resolve discrepancies",
        "Produce final reconciled text output"
      ],
      "status": "Not implemented"
    },
    "Output_Formatter": {
      "responsibilities": [
        "Format reconciled OCR results",
        "Support multiple output formats (initially text, consider JSON for future)"
      ],
      "status": "Partially implemented",
      "implementation_details": {
        "output_structure": {
          "directory_structure": "Create subdirectory for each engine (e.g., tesseract, google-vision, apple-vision)",
          "file_naming": "Use Apple's naming convention for duplicates (e.g., filename.ext, filename_1.ext, filename_2.ext)"
        }
      }
    }
  },
  "concrete_ocr_engines": {
    "status": "Partially implemented",
    "implemented_engines": [
      "TesseractEngine"
    ],
    "planned_engines": [
      "GoogleVisionEngine",
      "AppleVisionEngine"
    ],
    "implementation_notes": {
      "TesseractEngine": [
        "Handles PDF and image files",
        "Converts Tesseract version to string for JSON serialization",
        "Implements health monitoring based on recent operations",
        "Removes references to deprecated pytesseract methods (get_psm, get_oem)"
      ]
    },
    "interface_specification": {
      "abstract_base_class": "OCREngine",
      "methods": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "engine_options",
              "type": "Dict[str, Any]",
              "description": "A dictionary of engine-specific options"
            }
          ],
          "description": "Initialize the OCR engine with optional engine-specific settings."
        },
        {
          "name": "prepare_file",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "Path to the file to be prepared"
            }
          ],
          "return_type": "Any",
          "description": "Prepare a file for OCR processing. This may involve converting file formats, preprocessing images, or any other necessary steps."
        },
        {
          "name": "process_file",
          "parameters": [
            {
              "name": "prepared_file",
              "type": "Any",
              "description": "File object returned by prepare_file method"
            }
          ],
          "return_type": "Any",
          "description": "Perform OCR on the prepared file."
        },
        {
          "name": "parse_results",
          "parameters": [
            {
              "name": "raw_results",
              "type": "Any",
              "description": "Raw results returned by process_file method"
            }
          ],
          "return_type": "Dict[str, Any]",
          "description": "Parse the raw OCR results into a standardized format."
        },
        {
          "name": "run_ocr",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "Path to the file to be processed"
            }
          ],
          "return_type": "Dict[str, Any]",
          "description": "Run the complete OCR process on a file. This method should not be overridden."
        },
        {
          "name": "get_engine_name",
          "return_type": "str",
          "description": "Return the name of the OCR engine."
        },
        {
          "name": "get_supported_file_types",
          "return_type": "List[str]",
          "description": "Return a list of file extensions supported by this engine."
        },
        {
          "name": "get_engine_health",
          "return_type": "str",
          "description": "Return the current health status of the engine."
        }
      ],
      "standardized_result_format": {
        "text": "str",
        "confidence": "float",
        "pages": [
          {
            "page_number": "int",
            "text": "str",
            "confidence": "float",
            "bounding_boxes": [
              {
                "text": "str",
                "confidence": "float",
                "coordinates": {
                  "top_left": "(int, int)",
                  "top_right": "(int, int)",
                  "bottom_right": "(int, int)",
                  "bottom_left": "(int, int)"
                }
              }
            ]
          }
        ],
        "metadata": {
          "engine_name": "str",
          "processing_time": "float",
          "tesseract_version": "str"
        }
      },
      "error_handling": [
        "Raise FileNotFoundError if the input file doesn't exist",
        "Raise ValueError for invalid input parameters",
        "Raise OCREngineError (a custom exception) for engine-specific errors"
      ],
      "asynchronous_design": "All main processing methods are designed to be asynchronous",
      "performance_considerations": [
        "Engines should be designed with memory efficiency in mind, especially for large files",
        "Consider implementing batch processing capabilities where applicable"
      ],
      "health_monitoring": "The get_engine_health method should return one of three states: GREEN, YELLOW, RED"
    }
  },
  "error_handling": {
    "categorization": {
      "main_categories": [
        "File System",
        "Input Validation",
        "OCR Engine",
        "Network",
        "Resource"
      ],
      "implementation": "Use hierarchical structure with main categories and subcategories for precise handling and reporting"
    },
    "severity_levels": {
      "critical": "Halt processing immediately",
      "error": "Log and skip current file, continue with next",
      "warning": "Log and continue processing",
      "info": "Log in verbose mode only"
    },
    "recovery_strategy": "Single attempt for each operation, log error and move to next file/process if failure occurs",
    "user_notification": {
      "critical_errors": "Immediate console output",
      "other_errors": {
        "normal_mode": "Summary at end of processing",
        "verbose_mode": "Real-time updates"
      }
    },
    "logging": {
      "details": [
        "Timestamp",
        "Error category and severity",
        "File or process affected",
        "Error message and stack trace (if applicable)",
        "System state information (e.g., memory usage, current file number)"
      ]
    },
    "partial_results": {
      "handling": "Include in output file, clearly marked as partial",
      "reporting": "List in error summary for user awareness"
    },
    "json_serialization": {
      "strategy": "Catch TypeError exceptions during JSON serialization",
      "fallback": "Replace non-serializable results with error message"
    }
  },
  "performance_considerations": {
    "file_processing": "Process all files in large directories without batching",
    "progress_display": {
      "elements": [
        "Overall progress bar",
        "File counter (current file number / total files)",
        "Regular updates to display"
      ]
    }
  },
  "testing_plan": {
    "unit_tests": [
      "Logging system (including async operations and error handling)",
      "Health monitoring (including status updates and integration)",
      "OCR Engine Manager (including async processing and error scenarios)",
      "Individual OCR engines (implemented for TesseractEngine)"
    ],
    "integration_tests": [
      "End-to-end file processing with multiple engines",
      "Error handling scenarios across all components",
      "Performance under high load with concurrent processing",
      "Health status updates and logging under various conditions"
    ],
    "status": "Partially implemented",
    "test_mode": {
      "behavior": "Simulate entire process without actual processing",
      "output": "Mimic real processing output to test system logic and flow"
    }
  },
  "documentation_status": {
    "architecture_overview": "In progress",
    "component_interactions": "In progress",
    "usage_instructions": "To be created",
    "api_documentation": "To be created"
  },
  "coding_standards": {
    "language": "Python 3.7+",
    "style_guide": "PEP 8",
    "type_hinting": "Used throughout for improved readability and error catching",
    "documentation": "Docstrings for all classes and methods",
    "error_handling": "Comprehensive try-except blocks with specific error types",
    "asynchronous_programming": "Use of asyncio for concurrent operations"
  },
  "next_steps": [
    "Implement remaining OCR engine classes (GoogleVisionEngine, AppleVisionEngine)",
    "Develop Input Handler component with support for configurable debug levels",
    "Enhance Display Handler for health status and log display, including real-time updates",
    "Implement File Processor component",
    "Create Result Reconciler logic",
    "Enhance Output Formatter with support for additional formats (e.g., JSON, XML)"
  ],
  "future_enhancements": [
    "Implement method to pause and resume processing",
    "Add priority queue for file processing",
    "Develop method to remove or disable consistently failing engines",
    "Add detailed performance metrics (processing time per engine and file type)",
    "Implement distributed processing across network computers",
    "Enhance error handling and reporting capabilities",
    "Optimize parallel processing for improved performance",
    "Implement more sophisticated health status determination algorithms"
  ],
  "open_questions": {
    "engine_specific_options": "Placeholder for future expansion once more information about engines is available",
    "performance_optimization": {
      "memory_management": "Strategy for handling large directories efficiently",
      "parallel_processing": "Potential implementation for file handling or OCR operations"
    },
    "result_reconciliation": {
      "algorithm": "Method for reconciling results from multiple OCR engines",
      "confidence_scores": "Handling of different confidence scores from various engines"
    },
    "output_formats": "Consideration of additional formats beyond plain text (e.g., JSON, XML)"
  }
}